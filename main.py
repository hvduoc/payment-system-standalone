"""
H·ªá th·ªëng Qu·∫£n l√Ω Thu Chi Airbnb - Production Version
S·ª≠ d·ª•ng SQLite database ƒë·ªÉ l∆∞u tr·ªØ b·ªÅn v·ªØng
Bao g·ªìm qu·∫£n l√Ω user v√† deployment ready
"""

from fastapi import FastAPI, Request, HTTPException, Form, File, UploadFile, Depends, Cookie
from fastapi.responses import HTMLResponse, JSONResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import json
import os
import uuid
import shutil

# Timezone support - fallback cho Python < 3.9
try:
    from zoneinfo import ZoneInfo
    vietnam_tz = ZoneInfo('Asia/Ho_Chi_Minh')
except ImportError:
    # Fallback for Python < 3.9
    from datetime import timezone, timedelta
    vietnam_tz = timezone(timedelta(hours=7))  # UTC+7 for Vietnam

# Import c√°c module t·ª± t·∫°o
from database_production import get_db, create_tables, User, Payment, Handover, Building  

# Try simple auth first, fallback to original if needed
try:
    from auth_service_simple import (
        authenticate_user, 
        create_access_token, 
        get_current_user_from_token,
        create_user,
        get_all_users,
        get_role_display_name,
        get_password_hash
    )
    print("‚úÖ Using simple authentication (SHA256)")
except ImportError:
    from auth_service import (
        authenticate_user, 
        create_access_token, 
        get_current_user_from_token,
        create_user,
        get_all_users,
        get_role_display_name,
        get_password_hash
    )
    print("‚ö†Ô∏è Using bcrypt authentication")

# Thi·∫øt l·∫≠p
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# Kh·ªüi t·∫°o database
create_tables()

app = FastAPI(
    title="H·ªá th·ªëng Thu Chi Airbnb", 
    description="Qu·∫£n l√Ω thu chi v√† b√†n giao ti·ªÅn m·∫∑t - Production Version",
    version="2.0.0"
)

templates = Jinja2Templates(directory="templates")
app.mount("/uploads", StaticFiles(directory=UPLOAD_DIR), name="uploads")
# app.mount("/static", StaticFiles(directory="static"), name="static")  # Optional static files

# Helper function for template
def get_role_display_name_helper(role):
    """Helper function cho template"""
    roles = {
        "assistant": "Tr·ª£ l√Ω",
        "manager": "Qu·∫£n l√Ω", 
        "owner": "Ch·ªß s·ªü h·ªØu"
    }
    return roles.get(role, role)

# Add helper to template globals v·ªõi Vietnam timezone
# Timezone is already setup above during import

def get_vietnam_time():
    """L·∫•y th·ªùi gian hi·ªán t·∫°i theo m√∫i gi·ªù Vi·ªát Nam"""
    return datetime.now(vietnam_tz)

templates.env.globals['getRoleDisplayName'] = get_role_display_name_helper
templates.env.globals['getVietnamTime'] = get_vietnam_time

# Dependency ƒë·ªÉ l·∫•y user hi·ªán t·∫°i
def get_current_user(request: Request, db: Session = Depends(get_db)):
    """L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ token"""
    token = request.cookies.get("access_token")
    if not token:
        raise HTTPException(status_code=401, detail="Ch∆∞a ƒëƒÉng nh·∫≠p")
    
    try:
        user = get_current_user_from_token(token, db)
        if not user:
            raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")
        return user
    except Exception as e:
        print(f"Authentication error: {e}")
        raise HTTPException(status_code=401, detail="Token kh√¥ng h·ª£p l·ªá")

# Routes
@app.get("/", response_class=HTMLResponse)
async def root(request: Request, db: Session = Depends(get_db)):
    """Trang ch·ªß - redirect ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p"""
    token = request.cookies.get("access_token")
    
    if not token:
        print("No access token found in cookies")
        return RedirectResponse(url="/login")
    
    try:
        # Verify token
        user = get_current_user_from_token(token, db)
        if user:
            print(f"Valid user found: {user.username}")
            
            # Get dashboard data
            recent_payments = db.query(Payment).order_by(Payment.created_at.desc()).limit(5).all()
            recent_handovers = db.query(Handover).order_by(Handover.created_at.desc()).limit(5).all()
            
            return templates.TemplateResponse("dashboard_mobile.html", {
                "request": request,
                "user": user,
                "recent_payments": recent_payments,
                "recent_handovers": recent_handovers,
                "getRoleDisplayName": get_role_display_name_helper,
                "getVietnamTime": get_vietnam_time
            })
        else:
            print("Token verification failed: user not found")
    except Exception as e:
        print(f"Token verification failed with error: {e}")
    
    # Redirect to login if no valid token
    return RedirectResponse(url="/login")

# Legacy route redirects for backward compatibility
@app.get("/payments")
async def redirect_payments():
    """Redirect old /payments route to new /admin/payments"""
    return RedirectResponse(url="/admin/payments", status_code=301)

@app.get("/handovers") 
async def redirect_handovers():
    """Redirect old /handovers route to new /admin/handovers"""
    return RedirectResponse(url="/admin/handovers", status_code=301)

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """Trang ƒëƒÉng nh·∫≠p"""
    return templates.TemplateResponse("login_production.html", {"request": request})

@app.get("/debug", response_class=HTMLResponse)
async def debug_page(request: Request):
    """Debug authentication page"""
    return templates.TemplateResponse("debug_auth.html", {"request": request})

@app.get("/api/time-info")
async def get_time_info():
    """Get current time information"""
    vietnam_time = get_vietnam_time()
    utc_time = datetime.utcnow()
    
    return {
        "vietnam_time": vietnam_time.isoformat(),
        "vietnam_time_formatted": vietnam_time.strftime("%H:%M:%S %d/%m/%Y"),
        "utc_time": utc_time.isoformat(),
        "timezone": "Asia/Ho_Chi_Minh",
        "timezone_offset": "+07:00"
    }

@app.post("/api/login")
async def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """ƒêƒÉng nh·∫≠p API"""
    print(f"üîê Login attempt: {username}")
    
    # Check if user exists
    user_check = db.query(User).filter(User.username == username).first()
    if not user_check:
        print(f"‚ùå User not found: {username}")
        raise HTTPException(status_code=401, detail="Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng")
    
    print(f"üë§ User found: {username}, role: {user_check.role}")
    
    user = authenticate_user(db, username, password)
    if not user:
        print(f"‚ùå Authentication failed: {username}")
        raise HTTPException(status_code=401, detail="Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ƒë√∫ng")
    
    print(f"‚úÖ Authentication successful: {username}")
    
    # T·∫°o access token
    access_token_expires = timedelta(minutes=1440)  # 24 gi·ªù
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    
    response = JSONResponse({
        "success": True,
        "user": {
            "id": user.id,
            "username": user.username,
            "full_name": user.full_name,
            "role": user.role,
            "role_display": get_role_display_name(user.role)
        }
    })
    response.set_cookie(
        key="access_token",
        value=access_token,
        httponly=True,
        max_age=1440*60,  # 24 gi·ªù
        secure=False  # ƒê·∫∑t True khi deploy HTTPS
    )
    
    return response

@app.post("/api/payments")
async def add_payment(
    request: Request,
    booking_id: str = Form(...),
    guest_name: str = Form(...),
    room_number: str = Form(default=""),
    building_id: int = Form(default=None),
    amount_due: float = Form(...),
    amount_collected: float = Form(...),
    payment_method: str = Form(...),
    collected_by: str = Form(...),
    notes: str = Form(default=""),
    receipt_image: Optional[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Th√™m kho·∫£n thu m·ªõi"""
    
    # X·ª≠ l√Ω upload h√¨nh ·∫£nh
    image_path = None
    if receipt_image and receipt_image.filename:
        file_extension = receipt_image.filename.split('.')[-1]
        unique_filename = f"receipt_{uuid.uuid4()}.{file_extension}"
        image_path = os.path.join(UPLOAD_DIR, unique_filename)
        
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(receipt_image.file, buffer)
        
        image_path = f"/uploads/{unique_filename}"
    
    # T·∫°o payment record v·ªõi Vietnam timezone
    payment = Payment(
        booking_id=booking_id,
        guest_name=guest_name,
        room_number=room_number,
        building_id=building_id if building_id else None,
        amount_due=amount_due,
        amount_collected=amount_collected,
        payment_method=payment_method,
        collected_by=collected_by,
        notes=notes,
        receipt_image=image_path,
        status="completed",
        added_by_user_id=current_user.id
    )
    
    db.add(payment)
    db.commit()
    db.refresh(payment)
    
    # Format time for Vietnam timezone
    vietnam_time = get_vietnam_time()
    
    return {"success": True, "payment": {
        "id": payment.id,
        "booking_id": payment.booking_id,
        "guest_name": payment.guest_name,
        "amount_due": payment.amount_due,
        "amount_collected": payment.amount_collected,
        "payment_method": payment.payment_method,
        "collected_by": payment.collected_by,
        "notes": payment.notes,
        "receipt_image": payment.receipt_image,
        "created_at": vietnam_time.strftime("%H:%M:%S %d/%m/%Y"),
        "timestamp": vietnam_time.isoformat()
    }}

@app.get("/api/payments")
async def get_payments(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y danh s√°ch kho·∫£n thu"""
    
    # L·ªçc theo vai tr√≤
    if current_user.role == "assistant":
        # Tr·ª£ l√Ω ch·ªâ xem ƒë∆∞·ª£c kho·∫£n thu c·ªßa m√¨nh
        payments = db.query(Payment).filter(Payment.added_by_user_id == current_user.id).all()
    else:
        # Qu·∫£n l√Ω v√† ch·ªß s·ªü h·ªØu xem ƒë∆∞·ª£c t·∫•t c·∫£
        payments = db.query(Payment).all()
    
    payments_data = []
    for payment in payments:
        # Convert datetime to Vietnam timezone for display
        if payment.created_at:
            # Assume payment.created_at is already in Vietnam time (from database)
            display_time = payment.created_at.strftime("%H:%M:%S %d/%m/%Y") 
        else:
            display_time = "N/A"
            
        payments_data.append({
            "id": payment.id,
            "booking_id": payment.booking_id,
            "guest_name": payment.guest_name,
            "room_number": payment.room_number,
            "building_id": payment.building_id,
            "amount_due": payment.amount_due,
            "amount_collected": payment.amount_collected,
            "payment_method": payment.payment_method,
            "collected_by": payment.collected_by,
            "notes": payment.notes,
            "receipt_image": payment.receipt_image,
            "status": payment.status,
            "created_at": display_time,
            "timestamp": payment.created_at.isoformat() if payment.created_at else None
        })
    
    return {"payments": payments_data}

@app.get("/api/dashboard")
async def get_dashboard(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y th√¥ng tin dashboard"""
    
    # L·∫•y t·∫•t c·∫£ payments (theo role)
    if current_user.role == "assistant":
        payments = db.query(Payment).filter(Payment.added_by_user_id == current_user.id).all()
    else:
        payments = db.query(Payment).all()
    
    # L·∫•y t·∫•t c·∫£ handovers
    handovers = db.query(Handover).all()
    
    total_collected = sum(p.amount_collected for p in payments)
    total_due = sum(p.amount_due for p in payments)
    collection_rate = (total_collected / total_due * 100) if total_due > 0 else 0
    
    # T√≠nh ti·ªÅn m·∫∑t c·∫ßn b√†n giao
    cash_payments = sum(p.amount_collected for p in payments if p.payment_method == "cash")
    cash_handed_over = sum(h.amount for h in handovers if h.status == "completed")
    cash_pending = cash_payments - cash_handed_over
    
    return {
        "total_collected": total_collected,
        "total_due": total_due,
        "collection_rate": round(collection_rate, 2),
        "total_payments": len(payments),
        "cash_balance": cash_payments,
        "cash_pending_handover": cash_pending,
        "total_handovers": len(handovers),
        "last_updated": get_vietnam_time().isoformat()
    }

@app.post("/api/handovers")
async def create_handover(
    request: Request,
    recipient_user_id: int = Form(...),
    amount: float = Form(...),
    notes: str = Form(default=""),
    handover_image: Optional[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """T·∫°o b√†n giao ti·ªÅn m·∫∑t"""
    
    # Ki·ªÉm tra ng∆∞·ªùi nh·∫≠n c√≥ t·ªìn t·∫°i kh√¥ng
    recipient = db.query(User).filter(User.id == recipient_user_id, User.is_active == True).first()
    if not recipient:
        raise HTTPException(status_code=400, detail="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n")
    
    # X·ª≠ l√Ω upload h√¨nh ·∫£nh b√†n giao
    image_path = None
    if handover_image and handover_image.filename:
        file_extension = handover_image.filename.split('.')[-1]
        unique_filename = f"handover_{uuid.uuid4()}.{file_extension}"
        image_path = os.path.join(UPLOAD_DIR, unique_filename)
        
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(handover_image.file, buffer)
        
        image_path = f"/uploads/{unique_filename}"
    
    # T·∫°o handover record
    handover = Handover(
        handover_by_user_id=current_user.id,
        recipient_user_id=recipient_user_id,
        amount=amount,
        notes=notes,
        handover_image=image_path,
        status="completed",
        signature_status="pending"
    )
    
    db.add(handover)
    db.commit()
    db.refresh(handover)
    
    return {"success": True, "handover": {
        "id": handover.id,
        "handover_by": current_user.full_name,
        "recipient_name": recipient.full_name,
        "recipient_phone": recipient.phone,
        "amount": handover.amount,
        "notes": handover.notes,
        "handover_image": handover.handover_image,
        "created_at": handover.created_at.isoformat()
    }}

@app.get("/api/handovers")
async def get_handovers(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y danh s√°ch b√†n giao"""
    
    handovers = db.query(Handover).all()
    handovers_data = []
    
    for handover in handovers:
        handover_by_user = db.query(User).filter(User.id == handover.handover_by_user_id).first()
        recipient_user = db.query(User).filter(User.id == handover.recipient_user_id).first()
        
        handovers_data.append({
            "id": handover.id,
            "handover_by": handover_by_user.full_name if handover_by_user else "Unknown",
            "recipient_name": recipient_user.full_name if recipient_user else "Unknown",
            "recipient_phone": recipient_user.phone if recipient_user else "",
            "amount": handover.amount,
            "notes": handover.notes,
            "handover_image": handover.handover_image,
            "status": handover.status,
            "signature_status": handover.signature_status,
            "created_at": handover.created_at.isoformat(),
            "timestamp": handover.created_at.isoformat()
        })
    
    return {"handovers": handovers_data}

@app.get("/api/users")
async def get_users(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (cho dropdown recipient)"""
    
    # Ch·ªâ manager v√† owner m·ªõi c√≥ th·ªÉ xem danh s√°ch user
    if current_user.role not in ["manager", "owner"]:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
    
    users = get_all_users(db)
    users_data = []
    
    for user in users:
        users_data.append({
            "id": user.id,
            "username": user.username,
            "full_name": user.full_name,
            "role": user.role,
            "role_display": get_role_display_name(user.role),
            "phone": user.phone,
            "email": user.email
        })
    
    return {"users": users_data}

@app.get("/api/recipients")
async def get_recipients(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y danh s√°ch ng∆∞·ªùi c√≥ th·ªÉ nh·∫≠n b√†n giao"""
    
    # L·∫•y t·∫•t c·∫£ user tr·ª´ ch√≠nh m√¨nh
    users = db.query(User).filter(User.id != current_user.id, User.is_active == True).all()
    recipients_data = []
    
    for user in users:
        recipients_data.append({
            "id": user.id,
            "name": user.full_name,
            "role": get_role_display_name(user.role),
            "phone": user.phone or "Ch∆∞a c√≥ SƒêT"
        })
    
    return {"recipients": recipients_data}

# CRUD Operations for Payments
@app.put("/api/payments/{payment_id}")
async def update_payment(
    payment_id: int,
    booking_id: str = Form(...),
    guest_name: str = Form(...),
    room_number: str = Form(default=""),
    building_id: int = Form(default=None),
    amount_due: float = Form(...),
    amount_collected: float = Form(...),
    payment_method: str = Form(...),
    collected_by: str = Form(...),
    notes: str = Form(default=""),
    receipt_image: Optional[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """C·∫≠p nh·∫≠t payment record"""
    
    # T√¨m payment
    payment = db.query(Payment).filter(Payment.id == payment_id).first()
    if not payment:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kho·∫£n thu")
    
    # Ki·ªÉm tra quy·ªÅn edit (owner, manager c√≥ th·ªÉ edit t·∫•t c·∫£, assistant ch·ªâ edit c·ªßa m√¨nh)
    if current_user.role == "assistant" and payment.added_by_user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a kho·∫£n thu n√†y")
    
    # X·ª≠ l√Ω upload h√¨nh ·∫£nh m·ªõi (n·∫øu c√≥)
    if receipt_image and receipt_image.filename:
        file_extension = receipt_image.filename.split('.')[-1]
        unique_filename = f"receipt_{uuid.uuid4()}.{file_extension}"
        image_path = os.path.join(UPLOAD_DIR, unique_filename)
        
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(receipt_image.file, buffer)
        
        payment.receipt_image = f"/uploads/{unique_filename}"
    
    # C·∫≠p nh·∫≠t th√¥ng tin
    payment.booking_id = booking_id
    payment.guest_name = guest_name
    payment.room_number = room_number
    payment.building_id = building_id
    payment.amount_due = amount_due
    payment.amount_collected = amount_collected
    payment.payment_method = payment_method
    payment.collected_by = collected_by
    payment.notes = notes
    payment.updated_at = get_vietnam_time().replace(tzinfo=None)
    
    db.commit()
    db.refresh(payment)
    
    return {"success": True, "message": "C·∫≠p nh·∫≠t th√†nh c√¥ng", "payment_id": payment.id}

@app.delete("/api/payments/{payment_id}")
async def delete_payment(
    payment_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """X√≥a payment record"""
    
    # T√¨m payment
    payment = db.query(Payment).filter(Payment.id == payment_id).first()
    if not payment:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kho·∫£n thu")
    
    # Ki·ªÉm tra quy·ªÅn x√≥a (ch·ªâ owner v√† manager)
    if current_user.role not in ["owner", "manager"]:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn x√≥a kho·∫£n thu")
    
    db.delete(payment)
    db.commit()
    
    return {"success": True, "message": "X√≥a kho·∫£n thu th√†nh c√¥ng"}

@app.get("/api/payments/{payment_id}")
async def get_payment_detail(
    payment_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y chi ti·∫øt payment ƒë·ªÉ edit"""
    
    payment = db.query(Payment).filter(Payment.id == payment_id).first()
    if not payment:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y kho·∫£n thu")
    
    # Ki·ªÉm tra quy·ªÅn xem
    if current_user.role == "assistant" and payment.added_by_user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn xem kho·∫£n thu n√†y")
    
    return {
        "id": payment.id,
        "booking_id": payment.booking_id,
        "guest_name": payment.guest_name,
        "room_number": payment.room_number or "",
        "building_id": payment.building_id,
        "amount_due": payment.amount_due,
        "amount_collected": payment.amount_collected,
        "payment_method": payment.payment_method,
        "collected_by": payment.collected_by,
        "notes": payment.notes or "",
        "receipt_image": payment.receipt_image,
        "status": payment.status,
        "created_at": payment.created_at.isoformat() if payment.created_at else None
    }

# CRUD Operations for Handovers
@app.put("/api/handovers/{handover_id}")
async def update_handover(
    handover_id: int,
    from_person: str = Form(...),
    to_person: str = Form(...),
    amount: float = Form(...),
    building_id: int = Form(default=None),
    notes: str = Form(default=""),
    handover_image: Optional[UploadFile] = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """C·∫≠p nh·∫≠t handover record"""
    
    handover = db.query(Handover).filter(Handover.id == handover_id).first()
    if not handover:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†n giao")
    
    # Ki·ªÉm tra quy·ªÅn edit
    if current_user.role == "assistant" and handover.handover_by_user_id != current_user.id:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a b√†n giao n√†y")
    
    # X·ª≠ l√Ω upload h√¨nh ·∫£nh m·ªõi
    if handover_image and handover_image.filename:
        file_extension = handover_image.filename.split('.')[-1]
        unique_filename = f"handover_{uuid.uuid4()}.{file_extension}"
        image_path = os.path.join(UPLOAD_DIR, unique_filename)
        
        with open(image_path, "wb") as buffer:
            shutil.copyfileobj(handover_image.file, buffer)
        
        handover.image_path = f"/uploads/{unique_filename}"
    
    # C·∫≠p nh·∫≠t th√¥ng tin
    handover.from_person = from_person
    handover.to_person = to_person
    handover.amount = amount
    handover.building_id = building_id
    handover.notes = notes
    handover.updated_at = get_vietnam_time().replace(tzinfo=None)
    
    db.commit()
    db.refresh(handover)
    
    return {"success": True, "message": "C·∫≠p nh·∫≠t th√†nh c√¥ng", "handover_id": handover.id}

@app.delete("/api/handovers/{handover_id}")
async def delete_handover(
    handover_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """X√≥a handover record"""
    
    handover = db.query(Handover).filter(Handover.id == handover_id).first()
    if not handover:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†n giao")
    
    # Ki·ªÉm tra quy·ªÅn x√≥a
    if current_user.role not in ["owner", "manager"]:
        raise HTTPException(status_code=403, detail="Kh√¥ng c√≥ quy·ªÅn x√≥a b√†n giao")
    
    db.delete(handover)
    db.commit()
    
    return {"success": True, "message": "X√≥a b√†n giao th√†nh c√¥ng"}

@app.get("/api/handovers/{handover_id}")
async def get_handover_detail(
    handover_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y chi ti·∫øt handover ƒë·ªÉ edit"""
    
    handover = db.query(Handover).filter(Handover.id == handover_id).first()
    if not handover:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†n giao")
    
    return {
        "id": handover.id,
        "from_person": handover.from_person,
        "to_person": handover.to_person,
        "amount": handover.amount,
        "building_id": handover.building_id,
        "notes": handover.notes or "",
        "image_path": handover.image_path,
        "status": handover.status,
        "created_at": handover.created_at.isoformat() if handover.created_at else None
    }

# Building Management APIs
@app.get("/api/buildings")
async def get_buildings(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """L·∫•y danh s√°ch t√≤a nh√†"""
    
    buildings = db.query(Building).filter(Building.is_active == True).all()
    buildings_data = []
    
    for building in buildings:
        buildings_data.append({
            "id": building.id,
            "name": building.name,
            "address": building.address,
            "description": building.description
        })
    
    return {"buildings": buildings_data}

@app.post("/api/buildings")
async def create_building(
    name: str = Form(...),
    address: str = Form(default=""),
    description: str = Form(default=""),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """T·∫°o t√≤a nh√† m·ªõi (ch·ªâ owner)"""
    
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn t·∫°o t√≤a nh√†")
    
    building = Building(
        name=name,
        address=address,
        description=description,
        is_active=True
    )
    
    db.add(building)
    db.commit()
    db.refresh(building)
    
    return {"success": True, "building_id": building.id, "message": "T·∫°o t√≤a nh√† th√†nh c√¥ng"}

@app.put("/api/buildings/{building_id}")
async def update_building(
    building_id: int,
    name: str = Form(...),
    address: str = Form(default=""),
    description: str = Form(default=""),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """C·∫≠p nh·∫≠t t√≤a nh√† (ch·ªâ owner)"""
    
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn ch·ªânh s·ª≠a t√≤a nh√†")
    
    building = db.query(Building).filter(Building.id == building_id).first()
    if not building:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y t√≤a nh√†")
    
    building.name = name
    building.address = address
    building.description = description
    building.updated_at = get_vietnam_time().replace(tzinfo=None)
    
    db.commit()
    db.refresh(building)
    
    return {"success": True, "message": "C·∫≠p nh·∫≠t t√≤a nh√† th√†nh c√¥ng"}

@app.delete("/api/buildings/{building_id}")
async def delete_building(
    building_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """X√≥a t√≤a nh√† (ch·ªâ owner)"""
    
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn x√≥a t√≤a nh√†")
    
    building = db.query(Building).filter(Building.id == building_id).first()
    if not building:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y t√≤a nh√†")
    
    # Ki·ªÉm tra xem c√≥ payment n√†o ƒëang s·ª≠ d·ª•ng building n√†y kh√¥ng
    payments_count = db.query(Payment).filter(Payment.building_id == building_id).count()
    if payments_count > 0:
        raise HTTPException(status_code=400, detail=f"Kh√¥ng th·ªÉ x√≥a t√≤a nh√† n√†y v√¨ ƒëang c√≥ {payments_count} kho·∫£n thu s·ª≠ d·ª•ng")
    
    db.delete(building)
    db.commit()
    
    return {"success": True, "message": "X√≥a t√≤a nh√† th√†nh c√¥ng"}

@app.post("/api/logout")
@app.get("/api/logout")
async def logout(request: Request):
    """ƒêƒÉng xu·∫•t - h·ªó tr·ª£ c·∫£ GET v√† POST"""
    response = RedirectResponse(url="/login", status_code=302)
    response.delete_cookie("access_token")
    return response

# Routes qu·∫£n l√Ω user (ch·ªâ d√†nh cho owner)
@app.get("/admin/users", response_class=HTMLResponse)
async def admin_users_page(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Trang qu·∫£n l√Ω ng∆∞·ªùi d√πng (ch·ªâ owner)"""
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn truy c·∫≠p")
    
    return templates.TemplateResponse("admin_users.html", {
        "request": request, 
        "user": current_user,
        "getVietnamTime": get_vietnam_time
    })

@app.post("/api/admin/users")
async def create_new_user(
    username: str = Form(...),
    password: str = Form(...),
    full_name: str = Form(...),
    role: str = Form(...),
    phone: str = Form(default=""),
    email: str = Form(default=""),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """T·∫°o ng∆∞·ªùi d√πng m·ªõi (ch·ªâ owner)"""
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn t·∫°o user")
    
    try:
        new_user = create_user(db, username, password, full_name, role, phone, email)
        return {"success": True, "user": {
            "id": new_user.id,
            "username": new_user.username,
            "full_name": new_user.full_name,
            "role": new_user.role,
            "role_display": get_role_display_name(new_user.role),
            "phone": new_user.phone,
            "email": new_user.email
        }}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.put("/api/admin/users/{user_id}")
async def update_user(
    user_id: int,
    full_name: str = Form(...),
    role: str = Form(...),
    phone: str = Form(default=""),
    email: str = Form(default=""),
    password: str = Form(default=""),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng"""
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn s·ª≠a user")
    
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
        
        # Update basic info
        user.full_name = full_name
        user.role = role
        user.phone = phone
        user.email = email
        
        # Update password if provided
        if password:
            user.password_hash = get_password_hash(password)
        
        user.updated_at = get_vietnam_time()
        db.commit()
        db.refresh(user)
        
        return {"success": True, "user": {
            "id": user.id,
            "username": user.username,
            "full_name": user.full_name,
            "role": user.role,
            "role_display": get_role_display_name(user.role),
            "phone": user.phone,
            "email": user.email
        }}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@app.delete("/api/admin/users/{user_id}")
async def delete_user(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """X√≥a ng∆∞·ªùi d√πng (v√¥ hi·ªáu h√≥a)"""
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn x√≥a user")
    
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
        
        if user.id == current_user.id:
            raise HTTPException(status_code=400, detail="Kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh")
        
        # Soft delete - ch·ªâ v√¥ hi·ªáu h√≥a
        user.is_active = False
        user.updated_at = get_vietnam_time()
        db.commit()
        
        return {"success": True, "message": f"ƒê√£ v√¥ hi·ªáu h√≥a ng∆∞·ªùi d√πng {user.username}"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/admin/users/{user_id}/activate")
async def activate_user(
    user_id: int,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """K√≠ch ho·∫°t l·∫°i ng∆∞·ªùi d√πng"""
    if current_user.role != "owner":
        raise HTTPException(status_code=403, detail="Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ quy·ªÅn k√≠ch ho·∫°t user")
    
    try:
        user = db.query(User).filter(User.id == user_id).first()
        if not user:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
        
        user.is_active = True
        user.updated_at = get_vietnam_time()
        db.commit()
        
        return {"success": True, "message": f"ƒê√£ k√≠ch ho·∫°t ng∆∞·ªùi d√πng {user.username}"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=400, detail=str(e))

@app.post("/api/test-login")
async def test_user_login(
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """Test login cho b·∫•t k·ª≥ user n√†o"""
    try:
        user = authenticate_user(db, username, password)
        if user:
            return {
                "success": True,
                "message": f"‚úÖ Login th√†nh c√¥ng cho {username}",
                "user": {
                    "id": user.id,
                    "username": user.username,
                    "full_name": user.full_name,
                    "role": user.role,
                    "role_display": get_role_display_name(user.role),
                    "is_active": user.is_active
                }
            }
        else:
            return {
                "success": False,
                "message": f"‚ùå Login th·∫•t b·∫°i cho {username}",
                "error": "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i ho·∫∑c m·∫≠t kh·∫©u sai"
            }
    except Exception as e:
        return {
            "success": False,
            "message": f"‚ùå L·ªói khi test login: {str(e)}"
        }

if __name__ == "__main__":
    import uvicorn
    # Ch·∫°y tr√™n port 8004 ƒë·ªÉ tr√°nh conflict
    uvicorn.run(app, host="0.0.0.0", port=8004)
# Debug endpoints for user management
@app.get("/debug/users")
async def debug_users(db: Session = Depends(get_db)):
    """Debug endpoint: Li·ªát k√™ t·∫•t c·∫£ users"""
    try:
        users = db.query(User).all()
        user_list = []
        for user in users:
            user_list.append({
                "username": user.username,
                "role": user.role,
                "is_active": user.is_active,
                "created_at": str(user.created_at)
            })
        return {"total_users": len(users), "users": user_list}
    except Exception as e:
        return {"error": str(e)}

@app.post("/debug/create-admin")
async def debug_create_admin(db: Session = Depends(get_db)):
    """Debug endpoint: T·∫°o user admin"""
    try:
        # X√≥a admin c≈© n·∫øu c√≥
        existing_admin = db.query(User).filter(User.username == "admin").first()
        if existing_admin:
            db.delete(existing_admin)
            db.commit()
        
        # T·∫°o admin m·ªõi  
        admin_user = User(
            username="admin",
            password_hash=get_password_hash("admin123"),
            full_name="Administrator",
            role="owner", 
            phone="0901234567",
            email="admin@payment.com",
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        
        return {"status": "success", "message": "Admin user created", "username": "admin", "password": "admin123"}
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": str(e)}
@app.post("/admin/create")
async def create_admin_simple(db: Session = Depends(get_db)):
    """Simple endpoint: T·∫°o admin v·ªõi hardcoded hash"""
    try:
        # X√≥a admin c≈© n·∫øu c√≥
        existing_admin = db.query(User).filter(User.username == "admin").first()
        if existing_admin:
            db.delete(existing_admin)
            db.commit()
        
        # T·∫°o admin v·ªõi hardcoded hash cho admin123
        admin_user = User(
            username="admin",
            password_hash="$2b$12$8/56RWI7xEn6tP1bjeBofuNk049y7g3hdk66lWmei6VHm9TiF99nm",
            full_name="Administrator",
            role="owner", 
            phone="0901234567",
            email="admin@payment.com",
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        
        return {"status": "success", "message": "Admin user created with hardcoded hash", "username": "admin", "password": "admin123"}
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": str(e)}
@app.post("/debug/test-login")
async def debug_test_login(
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """Debug endpoint: Test login logic step by step"""
    try:
        result = {"steps": []}
        
        # Step 1: Find user
        user = db.query(User).filter(User.username == username).first()
        if not user:
            result["steps"].append("‚ùå User not found")
            return result
        else:
            result["steps"].append(f"‚úÖ User found: {user.username}, role: {user.role}")
        
        # Step 2: Check if user is active
        if not user.is_active:
            result["steps"].append("‚ùå User is not active")
            return result
        else:
            result["steps"].append("‚úÖ User is active")
        
        # Step 3: Verify password
        from auth_service import verify_password
        if not verify_password(password, user.password_hash):
            result["steps"].append("‚ùå Password verification failed")
            result["password_provided"] = password
            result["password_hash"] = user.password_hash[:20] + "..."
            return result
        else:
            result["steps"].append("‚úÖ Password verified")
        
        # Step 4: Create token
        from auth_service import create_access_token
        token = create_access_token(data={"sub": user.username})
        result["steps"].append("‚úÖ Token created")
        result["token"] = token[:20] + "..."
        
        result["status"] = "success"
        return result
        
    except Exception as e:
        return {"status": "error", "message": str(e), "type": type(e).__name__}
@app.post("/debug/create-simple-admin")
async def create_simple_admin(db: Session = Depends(get_db)):
    """T·∫°o admin v·ªõi password si√™u ƒë∆°n gi·∫£n"""
    try:
        # X√≥a admin c≈©
        existing_admin = db.query(User).filter(User.username == "admin").first()
        if existing_admin:
            db.delete(existing_admin)
            db.commit()
        
        # Hash password ng·∫Øn b·∫±ng bcrypt tr·ª±c ti·∫øp
        import bcrypt
        simple_password = "123"
        password_hash = bcrypt.hashpw(simple_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        # T·∫°o user
        admin_user = User(
            username="admin",
            password_hash=password_hash,
            full_name="Admin",
            role="owner", 
            phone="123456789",
            email="admin@test.com",
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        
        return {
            "status": "success", 
            "message": "Simple admin created", 
            "username": "admin", 
            "password": "123",
            "hash_length": len(password_hash)
        }
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": str(e), "type": type(e).__name__}
"""
EMERGENCY BYPASS: Simple authentication cho production access
"""

@app.post("/emergency/login")
async def emergency_login(
    username: str = Form(...),
    password: str = Form(...),
    db: Session = Depends(get_db)
):
    """Emergency login bypass for production access"""
    # Hardcoded emergency credentials
    if username == "admin" and password == "emergency2025":
        # Create a simple session token
        from datetime import datetime, timedelta
        import jwt
        
        payload = {
            "sub": "admin",
            "role": "owner",
            "exp": datetime.utcnow() + timedelta(hours=24)
        }
        
        # Simple JWT with emergency key
        token = jwt.encode(payload, "emergency-key-2025", algorithm="HS256")
        
        # Set cookie and redirect
        response = RedirectResponse(url="/dashboard", status_code=302)
        response.set_cookie(
            key="access_token",
            value=token,
            httponly=True,
            max_age=86400,  # 24 hours
            samesite="lax"
        )
        
        return response
    
    return {"status": "error", "message": "Emergency credentials only"}

@app.get("/emergency/create-user")
async def emergency_create_user(db: Session = Depends(get_db)):
    """Emergency user creation with simple password"""
    try:
        # Delete existing users
        db.query(User).delete()
        db.commit()
        
        # Create new admin with simple hash
        import hashlib
        simple_hash = hashlib.sha256("admin123".encode()).hexdigest()
        
        admin_user = User(
            username="admin",
            password_hash=simple_hash,
            full_name="Emergency Admin",
            role="owner",
            phone="0000000000",
            email="emergency@admin.com",
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        
        return {
            "status": "success",
            "message": "Emergency admin created",
            "username": "admin",
            "password": "admin123",
            "note": "Use /emergency/login with admin/emergency2025"
        }
        
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": str(e)}

@app.get("/dashboard")
async def dashboard_page(request: Request):
    """Simple dashboard page"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Payment System Dashboard</title>
        <meta charset="UTF-8">
    </head>
    <body style="font-family: Arial; padding: 20px;">
        <h1>üéâ Payment System Dashboard</h1>
        <h2>‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!</h2>
        <p><strong>H·ªá th·ªëng Payment Ledger ƒë√£ ho·∫°t ƒë·ªông!</strong></p>
        
        <div style="background: #f0f0f0; padding: 15px; margin: 20px 0;">
            <h3>üìä T√≠nh nƒÉng c√≥ s·∫µn:</h3>
            <ul>
                <li>‚úÖ Authentication ƒë√£ ho·∫°t ƒë·ªông</li>
                <li>‚úÖ Database connection OK</li>
                <li>‚úÖ User management OK</li>
                <li>üìã Booking management (c·∫ßn implement UI)</li>
                <li>üí∞ Payment tracking (c·∫ßn implement UI)</li>
                <li>üìà Reports (c·∫ßn implement UI)</li>
            </ul>
        </div>
        
        <div style="background: #e8f5e8; padding: 15px; margin: 20px 0;">
            <h3>üöÄ Deployment th√†nh c√¥ng:</h3>
            <ul>
                <li>‚úÖ Railway.app production</li>
                <li>‚úÖ GitHub auto-deployment</li>
                <li>‚úÖ PostgreSQL database</li>
                <li>‚úÖ Vietnamese localization</li>
            </ul>
        </div>
        
        <p><a href="/debug/users" style="color: blue;">üîç Debug: Xem users</a></p>
        <p><a href="/emergency/create-user" style="color: orange;">üö® Emergency: T·∫°o l·∫°i user</a></p>
    </body>
    </html>
    """)
@app.get("/emergency")
async def emergency_access(request: Request):
    """Emergency access page"""
    return templates.TemplateResponse("emergency_login.html", {"request": request})

@app.get("/debug/fix-auth")
async def debug_fix_auth(db: Session = Depends(get_db)):
    """Debug endpoint: Fix authentication"""
    try:
        print("üîß Starting auth fix...")
        import hashlib
        
        # Delete all users
        db.query(User).delete()
        db.commit()
        print("üóëÔ∏è Deleted old users")
        
        # Create admin with SHA256
        admin_hash = hashlib.sha256("admin123".encode()).hexdigest()
        admin_user = User(
            username="admin",
            password_hash=admin_hash,
            full_name="Admin System",
            role="owner",
            phone="0901234567",
            email="admin@system.com",
            is_active=True
        )
        db.add(admin_user)
        
        # Create emergency user
        emergency_hash = hashlib.sha256("emergency2025".encode()).hexdigest()
        emergency_user = User(
            username="emergency",
            password_hash=emergency_hash,
            full_name="Emergency Access",
            role="owner",
            phone="0000000000",
            email="emergency@system.com",
            is_active=True
        )
        db.add(emergency_user)
        
        # Create manager
        manager_hash = hashlib.sha256("manager123".encode()).hexdigest()
        manager_user = User(
            username="manager1",
            password_hash=manager_hash,
            full_name="Nguy·ªÖn VƒÉn Qu·∫£n L√Ω",
            role="manager",
            phone="0907654321", 
            email="manager@system.com",
            is_active=True
        )
        db.add(manager_user)
        
        db.commit()
        print("‚úÖ Users created successfully")
        
        return {
            "status": "success", 
            "message": "Authentication fixed successfully",
            "users_created": [
                {"username": "admin", "password": "admin123", "role": "owner"},
                {"username": "emergency", "password": "emergency2025", "role": "owner"},
                {"username": "manager1", "password": "manager123", "role": "manager"}
            ],
            "auth_method": "SHA256"
        }
        
    except Exception as e:
        db.rollback()
        return {"status": "error", "message": str(e)}

# Admin Routes - Payments and Handovers
@app.get("/admin/payments", response_class=HTMLResponse)
async def admin_payments_page(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Trang qu·∫£n l√Ω ghi nh·∫≠n thu"""
    return templates.TemplateResponse("admin_payments.html", {
        "request": request, 
        "user": current_user,
        "getVietnamTime": get_vietnam_time
    })

@app.get("/admin/handovers", response_class=HTMLResponse)
async def admin_handovers_page(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Trang qu·∫£n l√Ω b√†n giao"""
    return templates.TemplateResponse("admin_handovers.html", {
        "request": request, 
        "user": current_user,
        "getVietnamTime": get_vietnam_time
    })

@app.get("/admin/reports", response_class=HTMLResponse)
async def admin_reports_page(
    request: Request,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Trang b√°o c√°o thu chi"""
    return templates.TemplateResponse("reports_simple.html", {
        "request": request, 
        "user": current_user,
        "getVietnamTime": get_vietnam_time
    })

# Debug endpoints for production troubleshooting
@app.get("/debug/users")
async def debug_users(db: Session = Depends(get_db)):
    """Debug endpoint ƒë·ªÉ check users trong database"""
    try:
        users = db.query(User).all()
        user_list = []
        for user in users:
            user_list.append({
                "id": user.id,
                "username": user.username,
                "role": user.role,
                "full_name": user.full_name,
                "is_active": user.is_active,
                "password_hash": user.password_hash[:20] + "..." if user.password_hash else None
            })
        
        return {
            "total_users": len(users),
            "users": user_list,
            "database_type": "PostgreSQL" if os.getenv("DATABASE_URL") else "SQLite"
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/debug/test-auth/{username}/{password}")
async def debug_test_auth(username: str, password: str, db: Session = Depends(get_db)):
    """Debug endpoint ƒë·ªÉ test authentication"""
    try:
        print(f"üß™ Testing auth for: {username}")
        user = authenticate_user(db, username, password)
        
        if user:
            return {
                "success": True,
                "user": {
                    "username": user.username,
                    "role": user.role,
                    "full_name": user.full_name
                }
            }
        else:
            return {"success": False, "message": "Authentication failed"}
            
    except Exception as e:
        return {"success": False, "error": str(e)}

# Backup & Import APIs
@app.post("/api/backup/create")
async def create_backup(db: Session = Depends(get_db)):
    """T·∫°o backup data"""
    try:
        # Get all data
        payments = db.query(Payment).all()
        handovers = db.query(Handover).all()
        buildings = db.query(Building).all()
        users = db.query(User).all()
        
        backup_data = {
            "backup_date": get_vietnam_time().isoformat(),
            "payments": [{
                "booking_id": p.booking_id,
                "guest_name": p.guest_name,
                "building_id": p.building_id,
                "room_number": p.room_number,
                "amount_collected": p.amount_collected,
                "payment_method": p.payment_method,
                "collected_by": p.collected_by,
                "notes": p.notes,
                "created_at": p.created_at.isoformat() if p.created_at else None
            } for p in payments],
            "handovers": [{
                "building_id": h.building_id,
                "handover_date": h.handover_date.isoformat() if h.handover_date else None,
                "room_count": h.room_count,
                "total_amount": h.total_amount,
                "recipient": h.recipient,
                "notes": h.notes,
                "created_at": h.created_at.isoformat() if h.created_at else None
            } for h in handovers],
            "buildings": [{
                "name": b.name,
                "address": b.address,
                "contact_info": b.contact_info,
                "created_at": b.created_at.isoformat() if b.created_at else None
            } for b in buildings],
            "users": [{
                "username": u.username,
                "full_name": u.full_name,
                "role": u.role,
                "phone": u.phone,
                "email": u.email,
                "is_active": u.is_active
            } for u in users]
        }
        
        return JSONResponse({
            "success": True,
            "data": backup_data,
            "summary": {
                "payments": len(payments),
                "handovers": len(handovers),
                "buildings": len(buildings),
                "users": len(users)
            }
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/sample-data/create")
async def create_sample_data(db: Session = Depends(get_db)):
    """T·∫°o sample data cho demo"""
    try:
        # Check if data already exists
        existing_payments = db.query(Payment).count()
        existing_buildings = db.query(Building).count()
        
        if existing_payments > 0 or existing_buildings > 0:
            return {"success": False, "message": "Data ƒë√£ t·ªìn t·∫°i. S·ª≠ d·ª•ng /api/sample-data/reset ƒë·ªÉ reset."}
        
        # Create sample buildings
        buildings_data = [
            {"name": "T√≤a nh√† A - Qu·∫≠n 1", "address": "123 ƒê∆∞·ªùng L√™ L·ª£i, Qu·∫≠n 1, TP.HCM", "contact_info": "028.1234.5678"},
            {"name": "T√≤a nh√† B - Qu·∫≠n 3", "address": "456 ƒê∆∞·ªùng V√µ VƒÉn T·∫ßn, Qu·∫≠n 3, TP.HCM", "contact_info": "028.9876.5432"},
            {"name": "T√≤a nh√† C - Qu·∫≠n 7", "address": "789 ƒê∆∞·ªùng Nguy·ªÖn H·ªØu Th·ªç, Qu·∫≠n 7, TP.HCM", "contact_info": "028.5555.6666"}
        ]
        
        created_buildings = []
        for building_data in buildings_data:
            building = Building(
                name=building_data["name"],
                address=building_data["address"],
                contact_info=building_data["contact_info"],
                created_at=get_vietnam_time()
            )
            db.add(building)
            db.flush()
            created_buildings.append(building)
        
        # Create sample payments
        import random
        from datetime import timedelta
        
        sample_payments = []
        guest_names = ["Nguy·ªÖn VƒÉn A", "Tr·∫ßn Th·ªã B", "L√™ Minh C", "Ph·∫°m Thu D", "Ho√†ng VƒÉn E", "V≈© Th·ªã F"]
        payment_methods = ["cash", "bank_transfer", "credit_card"]
        collectors = ["Thu Chi 1", "Thu Chi 2", "Admin"]
        
        for i in range(15):
            building = random.choice(created_buildings)
            payment = Payment(
                booking_id=f"BK{str(i+1).zfill(3)}",
                guest_name=random.choice(guest_names),
                building_id=building.id,
                room_number=f"{random.randint(1,5)}{str(random.randint(1,20)).zfill(2)}",
                amount_collected=random.randint(300, 1500) * 1000,
                payment_method=random.choice(payment_methods),
                collected_by=random.choice(collectors),
                notes=f"Sample payment {i+1}",
                created_at=get_vietnam_time() - timedelta(days=random.randint(0, 30))
            )
            db.add(payment)
            sample_payments.append(payment)
        
        # Create sample handovers
        for building in created_buildings:
            handover = Handover(
                building_id=building.id,
                handover_date=get_vietnam_time() - timedelta(days=random.randint(1, 7)),
                room_count=random.randint(3, 8),
                total_amount=random.randint(2000, 8000) * 1000,
                recipient="K·∫ø to√°n",
                notes=f"B√†n giao ti·ªÅn m·∫∑t {building.name}",
                created_at=get_vietnam_time() - timedelta(days=random.randint(1, 7))
            )
            db.add(handover)
        
        db.commit()
        
        return {
            "success": True,
            "message": "Sample data created successfully",
            "summary": {
                "buildings": len(created_buildings),
                "payments": len(sample_payments),
                "handovers": len(created_buildings)
            }
        }
        
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=str(e))

# Kh·ªüi ƒë·ªông server - Railway compatibility
if __name__ == "__main__":
    import uvicorn
    # Railway sets PORT environment variable
    port = int(os.environ.get("PORT", 8000))
    print(f"üöÄ Starting server on port {port}")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0", 
        port=port,
        reload=False  # Production mode
    )
